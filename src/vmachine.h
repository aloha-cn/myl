
/* vmachine.h - A simple vmachine to run code generated by MYL
 *
 * Copyright (c) 2019 Eric Wan <aloha_cn@hotmail.com>
 *
 * This file is part of MYL.
 *
 * MYL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef	__VMACHINE_H
#define	__VMACHINE_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <limits.h>
#include <float.h>
#include <time.h>
//#include <afx.h>
//#include <windows.h>
//#include <sql.h> 
//#include <sqlext.h> 

#include <string>

using namespace std;

#include "funcdefs.h"

#define CODESIZE 4096
#define STACKSIZE 4096
#define HEAPSTART 2048
#define FLAG1 0x0100
#define FLAG2 0x0200
#define FLAG3 0x0400
#define FLFLAG 0x0800
#define STRFLAG 0x1000
#define OPMASK 0x00FF

enum {
	MOV, ADD, SUB, MUL, DIV, MOD, OR,  AND, XOR,
	NOTEQU, EQU, LESS, LE, GREAT, GE,
	PUSH, POP, JMP, CALL, RET, JE,  JG,  JL, SHL, SHR,
	NOT, INC, DEC, JNE, CNV
};
/* For new opcode, don't change any order. Just append after the last one,
 * and change vmachine.cpp and OprCode() in .y accordinglly */

enum {
	T_NULL, T_INTEGER, T_FLOAT, T_STRING, T_LIST
};

typedef string StringType;
typedef struct MemUnit {
	int tag;
	union {
		int i;
		float f;
		StringType *str;
	} mem;
} MemUnit;

typedef struct Instruction {
	int op;
	int dest;
	union UData {
		int i;
		float f;
	} src1, src2;
} Instruction;

#define VMMEM(addr) VMStack[addr].mem
/* VMMEM makes easier to use MemUnit */
#ifdef __cplusplus
extern "C" {
#endif

extern int SP,IP;
extern Instruction VMCode[CODESIZE];
extern MemUnit VMStack[STACKSIZE];

/* This function is for debug */
void PrintDisasm(FILE *fp, int addr, const Instruction *code);

void Run(int addr);
int Step();
void ResetVM();
void PrepareMem(int addr);
void DestroyMem(int addr);
void SetMemStr(int addr, const StringType &str);
void SetMemFloat(int addr, float num);
void SetMemInt(int addr, int num);

void PrepareFloat(int op, float *psrc1, float *psrc2);
void PrepareInt(int op, int *psrc1, int *psrc2);
void VMError(int lineno, const char*msg);
float GetMemFloat(int addr);
int GetMemInt(int addr);

#ifdef __cplusplus
}
#endif

#endif

